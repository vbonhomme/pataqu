[{"path":"https://vbonhomme.github.io/pataqu/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://vbonhomme.github.io/pataqu/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://vbonhomme.github.io/pataqu/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://vbonhomme.github.io/pataqu/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://vbonhomme.github.io/pataqu/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://vbonhomme.github.io/pataqu/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://vbonhomme.github.io/pataqu/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://vbonhomme.github.io/pataqu/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://vbonhomme.github.io/pataqu/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://vbonhomme.github.io/pataqu/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://vbonhomme.github.io/pataqu/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://vbonhomme.github.io/pataqu/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://vbonhomme.github.io/pataqu/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://vbonhomme.github.io/pataqu/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://vbonhomme.github.io/pataqu/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://vbonhomme.github.io/pataqu/LICENSE.html","id":"13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://vbonhomme.github.io/pataqu/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://vbonhomme.github.io/pataqu/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://vbonhomme.github.io/pataqu/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://vbonhomme.github.io/pataqu/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://vbonhomme.github.io/pataqu/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":[]},{"path":"https://vbonhomme.github.io/pataqu/articles/intro.html","id":"sources-of-uncertainties","dir":"Articles","previous_headings":"Rationale","what":"Sources of uncertainties","title":"Introducing pataqu","text":"chiefly mind archaeological data dating remains often temporally bounded two certain events, named terminus post/ante quem, abbreviated tpq taq1. tpq earliest date, taq latest. real event may happened anytime two boundaries flat, uniform, density probability along interval. can also think radiocarbon dating, comes prediction confidence interval (say \\(\\mu ± \\sigma\\)). dating differ real event density probability gaussian nature parameters \\(\\mu\\) \\(\\sigma\\).","code":""},{"path":"https://vbonhomme.github.io/pataqu/articles/intro.html","id":"consequences-and-how-to-inspect-them","dir":"Articles","previous_headings":"Rationale","what":"Consequences and how to inspect them","title":"Introducing pataqu","text":"Whatever source uncertainty, graphics, tests overall stories can obtain data may well affected. robust lovely trends temporal uncertainties? pataqu aims visualizing testing using permutations. way view merit use information contained data . idea : Simulate plausible new x values Display /test need Repeat many times see happens","code":""},{"path":"https://vbonhomme.github.io/pataqu/articles/intro.html","id":"case-study-taq-and-ptq","dir":"Articles","previous_headings":"","what":"Case study: taq and ptq","title":"Introducing pataqu","text":"load package also use dplyr ggplot2 tidyverse. Overall, library(tidyverse) need much more2","code":"library(dplyr) library(ggplot2) library(pataqu)"},{"path":"https://vbonhomme.github.io/pataqu/articles/intro.html","id":"animals-dataset","dir":"Articles","previous_headings":"Case study: taq and ptq","what":"animals dataset","title":"Introducing pataqu","text":"dataset made real (unpublished) data researchers measured value interest archaeological remains, several sites (us stratigraphical units ), dated tpq taq. remains belonged four taxa. treat ? decide display full interval see happens:  mess! try add mid point add smoother top . now able see trends lost uncertainty x meantime. graph may also one , likelihood. take animals simply draw x_new values, midpoint, somewhere tpq taq line. use set.seed sake replicability .  different. code used exactly shake_uniform made behind curtain3. look different shakers ?shake pataqu generalizes idea decoration around pattern. mother function permutations quake. simulate 5 new datasets randomized datations. want use shake_uniform need specify column tpq taq. –>","code":"head(animals) #> # A tibble: 6 × 6 #>   taxa  site   us        tpq   taq   value #>   <fct> <chr>  <chr>   <dbl> <dbl>   <dbl> #> 1 frog  Alz-Br A-B_FO   -125   -50 -0.0352 #> 2 frog  Ans-lM A-M_12     50   700 -0.123  #> 3 frog  Ans-lM A-M_12     50   700 -0.129  #> 4 frog  Ans-lM A-M_139   150   200  0.120  #> 5 frog  Ans-lM An-M_15    50   700  0.0575 #> 6 frog  Ans-lM A-M_150    50   200  0.0528 # We only show the first lines but you can View(animals) # pure cosmetics for lighter graphs theme_set(theme_minimal())  animals %>% ggplot() +  geom_errorbarh(aes(xmin=tpq, xmax=taq, y=value, col=taxa), size=0.2, alpha=0.5) animals %>%    mutate(x_new=(tpq+taq)/2) %>%    ggplot() +   aes(x=x_new, y=value, col=taxa) +   geom_point(size=0.1) +   geom_smooth(method=\"loess\", formula=\"y~x\", se=FALSE) -> gg_mid gg_mid set.seed(2329) # lets draw new x values animals2 <- animals %>%     dplyr::rowwise() %>%     dplyr::mutate(x_new=stats::runif(n=1, min=tpq, max=taq)) %>%     dplyr::ungroup() # and redo gg_mid graph with this new tibble gg_mid %+% animals2 a_q <- quake(animals, k=5, shaker=shake_uniform, min=tpq, max=taq) #>  * quake animals using shake_uniform #>  * launching 5 permutations"},{"path":"https://vbonhomme.github.io/pataqu/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Vincent Bonhomme. Author, maintainer. Allowen Evin. Author.","code":""},{"path":"https://vbonhomme.github.io/pataqu/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bonhomme V, Evin (2022). pataqu: Permutationnal Analysis Terminus Ante post QUem data. https://github.com/vbonhomme/pataqu, https://vbonhomme.github.io/pataqu/.","code":"@Manual{,   title = {pataqu: Permutationnal Analysis of Terminus Ante and post QUem data},   author = {Vincent Bonhomme and Allowen Evin},   year = {2022},   note = {https://github.com/vbonhomme/pataqu, https://vbonhomme.github.io/pataqu/}, }"},{"path":"https://vbonhomme.github.io/pataqu/index.html","id":"pataqu-","dir":"","previous_headings":"","what":"Permutationnal Analysis of Terminus Ante and post QUem data","title":"Permutationnal Analysis of Terminus Ante and post QUem data","text":"pataqu uses permutationnal approach deal data comes uncertainties x. typically aimed working temporal data exactly defined comes lower (upper) bounds, also called terminus ante (post) quem. can also used dating, typically radiocarbon dating, comes confidence interval likely affect interpretation. generally, permutationnal approach allows inspect graphically statistically effects x uncertainties.","code":""},{"path":"https://vbonhomme.github.io/pataqu/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Permutationnal Analysis of Terminus Ante and post QUem data","text":"can install development version pataqu GitHub : latest version released CRAN :","code":"# install.packages(\"devtools\") devtools::install_github(\"vbonhomme/pataqu\") install.packages(\"pataqu\")"},{"path":"https://vbonhomme.github.io/pataqu/reference/animals.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset of archaeological measurements with terminus post and ante quem dating — animals","title":"Dataset of archaeological measurements with terminus post and ante quem dating — animals","text":"real \"anonymized\" dataset archaeological data.","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/animals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset of archaeological measurements with terminus post and ante quem dating — animals","text":"","code":"animals"},{"path":"https://vbonhomme.github.io/pataqu/reference/animals.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dataset of archaeological measurements with terminus post and ante quem dating — animals","text":"data frame 5533 rows 6 variables: taxa 4 species names (imaginary) site 64 site names (abbreviated) us 1013 us (abbreviated), within sites tpq terminal post quem, ranging -225 375 taq terminal ante quem, ranging -175 700 value parameter interest measured","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/animals.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Dataset of archaeological measurements with terminus post and ante quem dating — animals","text":"Unpublished dataset, modified authors become toy dataset.","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/animals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dataset of archaeological measurements with terminus post and ante quem dating — animals","text":"original dataset aimed measured evolution value index, four taxa, remains recovered us within site wand datations provided tpq taq.","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/animals_q.html","id":null,"dir":"Reference","previous_headings":"","what":"Animals with 20 permutations on 7 temporal slices — animals_q","title":"Animals with 20 permutations on 7 temporal slices — animals_q","text":"See animals. obtained :","code":"set.seed(2329) animals_q <-  animals %>%   dplyr::filter(tpq>-100, taq<100) %>%   quake(k=20, shaker=shake_uniform, tpq, taq) usethis::use_data(animals_q, overwrite=TRUE)"},{"path":"https://vbonhomme.github.io/pataqu/reference/animals_q.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Animals with 20 permutations on 7 temporal slices — animals_q","text":"","code":"animals_q"},{"path":"https://vbonhomme.github.io/pataqu/reference/animals_q.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Animals with 20 permutations on 7 temporal slices — animals_q","text":"object class tbl_df (inherits tbl, data.frame) 31700 rows 8 columns.","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Bin — bin","title":"Bin — bin","text":"Bin summarise without fitting","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bin — bin","text":"","code":"bin(df, y = y, x = x_new, by = NULL, fun = stats::median, k = k)"},{"path":"https://vbonhomme.github.io/pataqu/reference/bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bin — bin","text":"df tibble() typically returned quake() y, x colnames use. Default y/x_new colname grouping structure (besides k). Default NULL fun use summarise y k colname iteration . Default k.","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bin — bin","text":"","code":"animals_q %>% bin(y=value, by=taxa, fun=mean) #> # A tibble: 400 × 4 #>        k taxa  x_bin            y_bin #>    <int> <fct> <fct>            <dbl> #>  1     1 cat   [-75,-19.6]   -0.0384  #>  2     1 cat   (-19.6,-2.48] -0.0754  #>  3     1 cat   (-2.48,16.9]  -0.0823  #>  4     1 cat   (16.9,59.8]    0.0182  #>  5     1 cat   (59.8,79.3]    0.0495  #>  6     1 bird  [-75,-19.6]   -0.0244  #>  7     1 bird  (-19.6,-2.48] -0.0174  #>  8     1 bird  (-2.48,16.9]   0.00499 #>  9     1 bird  (16.9,59.8]    0.0233  #> 10     1 bird  (59.8,79.3]   -0.0102  #> # … with 390 more rows  animals_q %>% bin(y=value, fun=mean) #> # A tibble: 100 × 3 #>        k x_bin           y_bin #>    <int> <fct>           <dbl> #>  1     1 [-75,-19.6]   -0.0130 #>  2     1 (-19.6,-2.48] -0.0172 #>  3     1 (-2.48,16.9]  -0.0267 #>  4     1 (16.9,59.8]    0.0110 #>  5     1 (59.8,79.3]    0.0170 #>  6     2 [-75,-19.6]   -0.0175 #>  7     2 (-19.6,-2.48] -0.0126 #>  8     2 (-2.48,16.9]  -0.0323 #>  9     2 (16.9,59.8]    0.0202 #> 10     2 (59.8,79.3]    0.0137 #> # … with 90 more rows"},{"path":"https://vbonhomme.github.io/pataqu/reference/comparison_testers.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparisons testers — comparison_testers","title":"Comparisons testers — comparison_testers","text":"testers used internally test may interest outside.","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/comparison_testers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparisons testers — comparison_testers","text":"","code":"wilcox_p(df)  kruskal_p(df)  aov_p(df)"},{"path":"https://vbonhomme.github.io/pataqu/reference/comparison_testers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparisons testers — comparison_testers","text":"df tibble() two columns named g y, two levels group.","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/comparison_testers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comparisons testers — comparison_testers","text":"numeric p.value (NA_real enough data groups)","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/comparison_testers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Comparisons testers — comparison_testers","text":"testers thin wrappers around stats::wilcox.test, stats::kruskal.test stats::aov. Type wilcox_p (bracket) build .","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/comparison_testers.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Comparisons testers — comparison_testers","text":"wilcox_p: wilcoxon's rank test pairwise differences kruskal_p: kruskal's test global differences aov_p: analysis variance test global pairwise differences","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/comparison_testers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comparisons testers — comparison_testers","text":"","code":"# dummy tibble x <- tibble::tibble(g=rep(letters[1:2], each=10),                    y=stats::runif(20, -1, 1))  wilcox_p(x) #> [1] 0.7959363 aov_p(x) #> [1] 0.8848667  # on >2 groups x$g[15:20] <- \"c\" kruskal_p(x) #> [1] 0.95327 aov_p(x) #> [1] 0.9745148"},{"path":"https://vbonhomme.github.io/pataqu/reference/cutter.html","id":null,"dir":"Reference","previous_headings":"","what":"Discretise numeric x values into categorical — cutter","title":"Discretise numeric x values into categorical — cutter","text":"Thin wrappers around ggplot2::cut_interval() friends. Useful defining fixed x values fitting functions.","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/cutter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discretise numeric x values into categorical — cutter","text":"","code":"cutter_interval(df, n, ...)  cutter_number(df, n, ...)  cutter_width(df, width, ...)  cutter_to_seq(x)"},{"path":"https://vbonhomme.github.io/pataqu/reference/cutter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discretise numeric x values into categorical — cutter","text":"df tibble() n number intervals create approximate number observations ... colnames width width intervals create x cutter extract breaks","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/cutter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discretise numeric x values into categorical — cutter","text":"factor appropriate levels","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/cutter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Discretise numeric x values into categorical — cutter","text":", columns interest may passed directly. want cut directly numeric vectors, use base::cut() ggplot2::cut_interval() friends.","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/cutter.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Discretise numeric x values into categorical — cutter","text":"cutter_interval: makes groups equal range cutter_number: makes n groups approximately equal numbers observations cutter_width: makes groups certain width cutter_to_seq: extract breaks cutter factor","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/cutter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discretise numeric x values into categorical — cutter","text":"","code":"cutter_interval(animals, 30, tpq, taq) %>% table() #> . #>   [-175,-146]   (-146,-117]  (-117,-87.5] (-87.5,-58.3] (-58.3,-29.2]  #>             4             0           125            25           571  #>     (-29.2,0]      (0,29.2]   (29.2,58.3]   (58.3,87.5]    (87.5,117]  #>           544           389           131           536           364  #>     (117,146]     (146,175]     (175,204]     (204,233]     (233,262]  #>            79           460           383           482           215  #>     (262,292]     (292,321]     (321,350]     (350,379]     (379,408]  #>           357           544            67            18           164  #>     (408,438]     (438,467]     (467,496]     (496,525]     (525,554]  #>            36             0             0            30             0  #>     (554,583]     (583,612]     (612,642]     (642,671]     (671,700]  #>             0             6             0             0             3  cutter_number(animals, 10, tpq, taq,) %>% table() #> . #> [-175,-50]    (-50,0]     (0,30]    (30,70]   (70,125]  (125,200]  (200,220]  #>        633        636        412        572        515        843        436  #>  (220,265]  (265,300]  (300,700]  #>        491        671        324  cutter_width(animals, 30, tpq, taq) %>% table() #> . #> [-195,-165] (-165,-135] (-135,-105]  (-105,-75]   (-75,-45]   (-45,-15]  #>           4           0           0         150         479         162  #>    (-15,15]     (15,45]     (45,75]    (75,105]   (105,135]   (135,165]  #>         759         136         632         365          81         411  #>   (165,195]   (195,225]   (225,255]   (255,285]   (285,315]   (315,345]  #>          51         859         179         397         544           0  #>   (345,375]   (375,405]   (405,435]   (435,465]   (465,495]   (495,525]  #>          85         164          36           0           0          30  #>   (525,555]   (555,585]   (585,615]   (615,645]   (645,675]   (675,705]  #>           0           0           6           0           0           3   # # note that in x_cut_number above, we have many observations yet # the number of _different_ levels is not so diverse, # so that n=30 would fail with \"Insufficient data values\" # unlist(animals[, c(\"tpq\", \"taq\")]) %>% table()"},{"path":"https://vbonhomme.github.io/pataqu/reference/df_g.html","id":null,"dir":"Reference","previous_headings":"","what":"Toy dataset with centered/interval dating — df_g","title":"Toy dataset with centered/interval dating — df_g","text":"used examples","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/df_g.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toy dataset with centered/interval dating — df_g","text":"","code":"df_g"},{"path":"https://vbonhomme.github.io/pataqu/reference/df_g.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Toy dataset with centered/interval dating — df_g","text":"object class tbl_df (inherits tbl, data.frame) 8 rows 5 columns.","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/df_g.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Toy dataset with centered/interval dating — df_g","text":"obtained :","code":"set.seed(2329) df_g <- tibble::tibble(c14  = round(runif(8, -100, 100)), # best prediction                        sd1   = round(runif(8, 5, 20)),     # one sd                        species = rep(c(\"fox\", \"hound\"), each=4), # dummy grouping                         site = rep(letters[1:2], each=2, times=2), # dummy sites                        mes  = c(1:4, 4:1) + runif(8, -0.5, 0.5)) usethis::use_data(df_g, overwrite=TRUE)"},{"path":"https://vbonhomme.github.io/pataqu/reference/df_u.html","id":null,"dir":"Reference","previous_headings":"","what":"Toy dataset with terminus ante and post quem dating — df_u","title":"Toy dataset with terminus ante and post quem dating — df_u","text":"used examples","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/df_u.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toy dataset with terminus ante and post quem dating — df_u","text":"","code":"df_u"},{"path":"https://vbonhomme.github.io/pataqu/reference/df_u.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Toy dataset with terminus ante and post quem dating — df_u","text":"object class tbl_df (inherits tbl, data.frame) 8 rows 5 columns.","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/df_u.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Toy dataset with terminus ante and post quem dating — df_u","text":"obtained :","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/fitting.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit each permuations using various regression — fitting","title":"Fit each permuations using various regression — fitting","text":"Useful boiling multiple permutations quake().","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/fitting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit each permuations using various regression — fitting","text":"","code":"fit_lm(   df,   y = y,   formula_rhs = x_new,   by = NULL,   x_pred = cutter_number(df, 30, x_new),   k = k,   .keep_mod = FALSE,   ... )  fit_gam(   df,   y = y,   formula_rhs = s(x_new, bs = \"cs\"),   by = NULL,   x_pred = cutter_number(df, 30, x_new),   k = k,   .keep_mod = FALSE,   ... )  fit_loess(   df,   y = y,   formula_rhs = x_new,   by = NULL,   x_pred = cutter_number(df, 30, x_new),   k = k,   .keep_mod = FALSE,   ... )"},{"path":"https://vbonhomme.github.io/pataqu/reference/fitting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit each permuations using various regression — fitting","text":"df tibble() typically returned quake() y colname value interest. Default y. formula_rhs right hand-side stats::formula() used. Depending function, different defaults used. See Usage section . colname grouping structure (besides k). Default NULL x_pred sequence x predict new values fitting k colname iteration . Default k. .keep_mod logical whether keep regression models index fit quality. See Details ... additional parameters passed main fitting functions. See Examples","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/fitting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit each permuations using various regression — fitting","text":"tibble()","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/fitting.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit each permuations using various regression — fitting","text":"x_pred can passed directly vector numeric. default, cutter_number(df, 30, x_new) used 30 groups approximately equal numbers observations made using new x values, ie likely cover range possible x values. formula_rhs correspond right hand side formula. want fit using, say y~x_new, corresponds x_new. saves typing y~ already provided y argument. can pass stats::formula() want. instance x_new^2 + x_new -1 correspond quadratic model intercept. See stats::formula() stick grammar.","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/fitting.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Fit each permuations using various regression — fitting","text":"fit_lm: fitting using linear model fit_gam: fitting using generalised additive models smoothness estimation fit_loess: fitting using local polynomial regression","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/fitting.html","id":"motivation","dir":"Reference","previous_headings":"","what":"Motivation","title":"Fit each permuations using various regression — fitting","text":"helpers wrap stats::loess(), stats::lm(), mgcv::gam() make assumption know : ie models appropriate conditions respected. : fit model permutation (group-wise provided). predict new y values using stats::predict model fixed x_pred values. main motivation generalize many permutations original data: find model fits try represent trends using . practice, adding ggplot2::geom_smooth graph, exactly , even ggplot2 can largely take care modelling aspect. second motivation boil randomized x values fixed x values, provide function argument x_pred, predicted y values calculated using stats::predict. price pay fit models benefit cant test differences groups easily fixed x values, discretize temporal range. Besides testing, graphical comparisons eased , desriptors extrema, intermediate quantiles, average, etc. can calculated fixed x-values. purpose main spaghetti plot. last (least) motivation assess quality fitting functions. Using .keep_mod=TRUE gives glimpse providing indices adjusted r^2 (lm gam), residual standard deviation (loess) permutation. also retain model can access components interest coefficients, p-values, etc. Note need fitting discretize values, can also bin() requested x slices. still allows testing minus model intermediate. Finally, want graphical approach, can directly use spaghetti0 directly quake()","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/fitting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit each permuations using various regression — fitting","text":"","code":"# Show fitter on a single iteration df <- animals_q %>% dplyr::filter(k==1, taxa==\"cat\") plot(df$x_new, df$value, pch=20, cex=0.2) x_pred <- seq(-100, 100, 10)  # use fitting functions lm_fit    <- fit_lm(df, y=value, x_pred=x_pred, span=0.5) # you can specify arguments #>  * fitting with lm(value ~ x_new, span=0.5) #> Warning: In lm.fit(x, y, offset = offset, singular.ok = singular.ok, ...) : #>  extra argument ‘span’ will be disregarded loess_fit <- fit_loess(df, y=value, x_pred=x_pred) #>  * fitting with loess(value ~ x_new) gam_fit   <- fit_gam(df, y=value, x_pred=x_pred) #>  * fitting with gam(value ~ s(x_new, bs = \"cs\"))  # now draw them lines(lm_fit$x_pred, lm_fit$y_pred, col=\"firebrick3\") lines(loess_fit$x_pred, loess_fit$y_pred, col=\"orange\") lines(gam_fit$x_pred, gam_fit$y_pred, col=\"blue\")   # usually, you would use them on a full object returned by quake # here we show the first 6 permutations along with their loess cat <- animals_q %>% dplyr::filter(k<=6, taxa==\"cat\") cat_lines <- cat %>% fit_loess(y=value, x_pred=x_pred) #>  * fitting with loess(value ~ x_new) ggplot2::ggplot() +  ggplot2::geom_point(mapping=ggplot2::aes(x=x_new, y=value), data=cat, size=0.2) +  ggplot2::geom_line(mapping=ggplot2::aes(x=x_pred, y=y_pred, group=k), data=cat_lines, col=\"red\") +  ggplot2::facet_wrap(~k, ncol=3) +  ggplot2::theme_minimal()"},{"path":"https://vbonhomme.github.io/pataqu/reference/pataqu-package.html","id":null,"dir":"Reference","previous_headings":"","what":"pataqu: Permutationnal Analysis of Terminus Ante and post QUem data — pataqu-package","title":"pataqu: Permutationnal Analysis of Terminus Ante and post QUem data — pataqu-package","text":"pataqu uses permutationnal approach deal data comes uncertainties x. typically aimed working temporal data exactly defined comes lower (upper) bounds, also called terminus ante (post) quem. can also used dating, typically radiocarbon datation, comes confidence interval likely affect interpretation. generally, permutationnal approach allows inspect graphically statistically effects x uncertainties.","code":""},{"path":[]},{"path":"https://vbonhomme.github.io/pataqu/reference/pataqu-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"pataqu: Permutationnal Analysis of Terminus Ante and post QUem data — pataqu-package","text":"Maintainer: Vincent Bonhomme bonhomme.vincent@gmail.com (ORCID) Authors: Allowen Evin (ORCID)","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://vbonhomme.github.io/pataqu/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/quake.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate new datasets with new values — quake","title":"Generate new datasets with new values — quake","text":"wrapper around shakers allows run k times adds index resulting tibble. typical entry point permutationnal analysis also checks data avoid problems.","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/quake.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate new datasets with new values — quake","text":"","code":"quake(x, k = 1, shaker = shake_uniform, ...)"},{"path":"https://vbonhomme.github.io/pataqu/reference/quake.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate new datasets with new values — quake","text":"x tibble() k number new datasets create shaker one shaker functions (shake_uniform() default) ... arguments expected selected shaker function. must provided named. See examples","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/quake.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate new datasets with new values — quake","text":"'shaken' tibble() new columns iteration index","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/quake.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate new datasets with new values — quake","text":"","code":"set.seed(2329) # replicability # shaking uniform df_u #> # A tibble: 8 × 5 #>     tpq   taq species site    mes #>   <dbl> <dbl> <chr>   <chr> <dbl> #> 1    34    43 fox     a      1.22 #> 2   -90   -46 fox     a      1.90 #> 3    87    98 fox     b      2.94 #> 4     5    32 fox     b      4.38 #> 5   -95   -85 hound   a      4.35 #> 6    42    69 hound   a      2.91 #> 7    10    50 hound   b      1.58 #> 8    27    46 hound   b      1.45 df_u %>% quake(k=5, shake_uniform, min=tpq, max=taq) #>  * quake . using shake_uniform #>  * launching 5 permutations #> # A tibble: 40 × 7 #>        k   tpq   taq species site    mes x_new #>    <int> <dbl> <dbl> <chr>   <chr> <dbl> <dbl> #>  1     1    34    43 fox     a      1.22  40.0 #>  2     1   -90   -46 fox     a      1.90 -87.8 #>  3     1    87    98 fox     b      2.94  97.3 #>  4     1     5    32 fox     b      4.38  19.2 #>  5     1   -95   -85 hound   a      4.35 -94.8 #>  6     1    42    69 hound   a      2.91  61.2 #>  7     1    10    50 hound   b      1.58  32.0 #>  8     1    27    46 hound   b      1.45  39.1 #>  9     2    34    43 fox     a      1.22  34.7 #> 10     2   -90   -46 fox     a      1.90 -52.2 #> # … with 30 more rows # not that you can omit shakers' argument names, providing they come in the right order # eg:  df_u %>% quake(k=5, shake_uniform, tpq, taq)  # shaking gaussian df_g #> # A tibble: 8 × 5 #>     c14   sd1 species site    mes #>   <dbl> <dbl> <chr>   <chr> <dbl> #> 1    34     6 fox     a      1.22 #> 2   -90    18 fox     a      1.90 #> 3    87     7 fox     b      2.94 #> 4     5    12 fox     b      4.38 #> 5   -95     7 hound   a      4.35 #> 6    42    12 hound   a      2.91 #> 7    10    17 hound   b      1.58 #> 8    27    10 hound   b      1.45 df_g %>% quake(k=5, shake_gaussian, mean=c14, sd=sd1) #>  * quake . using shake_gaussian #>  * launching 5 permutations #> # A tibble: 40 × 7 #>        k   c14   sd1 species site    mes  x_new #>    <int> <dbl> <dbl> <chr>   <chr> <dbl>  <dbl> #>  1     1    34     6 fox     a      1.22  36.2  #>  2     1   -90    18 fox     a      1.90 -96.4  #>  3     1    87     7 fox     b      2.94  88.3  #>  4     1     5    12 fox     b      4.38  14.2  #>  5     1   -95     7 hound   a      4.35 -96.7  #>  6     1    42    12 hound   a      2.91  41.2  #>  7     1    10    17 hound   b      1.58   7.63 #>  8     1    27    10 hound   b      1.45  38.5  #>  9     2    34     6 fox     a      1.22  41.8  #> 10     2   -90    18 fox     a      1.90 -84.5  #> # … with 30 more rows  # on a more realistic dataset bigger baby: # animals %>% quake(k=2, shake_uniform, tpq, taq)"},{"path":"https://vbonhomme.github.io/pataqu/reference/shake.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate new x values — shake","title":"Generate new x values — shake","text":"Used internally quake() generate new x values. Different flavours (shake_*) exist depending type uncertainties . *_within variants allow share new values within level.","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/shake.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate new x values — shake","text":"","code":"shake_uniform(x, min, max)  shake_uniform_within(x, min, max, within)  shake_gaussian(x, mean, sd)  shake_gaussian_within(x, mean, sd, within)"},{"path":"https://vbonhomme.github.io/pataqu/reference/shake.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate new x values — shake","text":"x tibble() min, max colnames pass stats::runif() (shake_uniform_*) within colname define levels share new x values (*_within variants) mean, sd colnames pass stats::rnorm() (shake_gaussian_*)","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/shake.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate new x values — shake","text":"'shaken' tibble() additional x_new column","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/shake.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate new x values — shake","text":"uniform considers actual x can anytime two temporal bounds. typically case ante quem data. gaussian considers actual x centered value associated error. can think C^14 dating provided estimate standard deviation expect around . shake_uniform_*, min/max correspond tpq/taq respectively. shake_gaussian_*, mean/sd correspond single (best) x standard deviation.","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/shake.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Generate new x values — shake","text":"shake_uniform: generate new x values using uniform distribution shake_uniform_within: shake_uniform within group shake_gaussian: generate new x values using gaussian distribution shake_gaussian_within: shake_gaussian within group","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/shake.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate new x values — shake","text":"","code":"set.seed(2329) # replicability # we will use builtin dummy df_u and df_g  # show uniform shaking df_u # 'unshaken' data #> # A tibble: 8 × 5 #>     tpq   taq species site    mes #>   <dbl> <dbl> <chr>   <chr> <dbl> #> 1    34    43 fox     a      1.22 #> 2   -90   -46 fox     a      1.90 #> 3    87    98 fox     b      2.94 #> 4     5    32 fox     b      4.38 #> 5   -95   -85 hound   a      4.35 #> 6    42    69 hound   a      2.91 #> 7    10    50 hound   b      1.58 #> 8    27    46 hound   b      1.45 df_u %>% shake_uniform(tpq, taq)  # new x values bounded between each tpq/taq #> # A tibble: 8 × 6 #>     tpq   taq species site    mes x_new #>   <dbl> <dbl> <chr>   <chr> <dbl> <dbl> #> 1    34    43 fox     a      1.22  40.0 #> 2   -90   -46 fox     a      1.90 -87.8 #> 3    87    98 fox     b      2.94  97.3 #> 4     5    32 fox     b      4.38  19.2 #> 5   -95   -85 hound   a      4.35 -94.8 #> 6    42    69 hound   a      2.91  61.2 #> 7    10    50 hound   b      1.58  32.0 #> 8    27    46 hound   b      1.45  39.1 df_u %>% shake_uniform(tpq, taq)  # same idea, different values #> # A tibble: 8 × 6 #>     tpq   taq species site    mes x_new #>   <dbl> <dbl> <chr>   <chr> <dbl> <dbl> #> 1    34    43 fox     a      1.22  34.7 #> 2   -90   -46 fox     a      1.90 -52.2 #> 3    87    98 fox     b      2.94  88.6 #> 4     5    32 fox     b      4.38  17.9 #> 5   -95   -85 hound   a      4.35 -93.8 #> 6    42    69 hound   a      2.91  55.3 #> 7    10    50 hound   b      1.58  41.0 #> 8    27    46 hound   b      1.45  32.8  # you can decide that new values must be stratified per site # we create a df_u variant with equal tpq and taq per site (otherwise makes no sense) df_u %>%   dplyr::group_by(site) %>%   dplyr::mutate(tpq=tpq[1], taq=taq[1]) %>% # first value defines all others   dplyr::ungroup() -> df_u_site  # now compare df_u_site %>% shake_uniform(tpq, taq) #> # A tibble: 8 × 6 #>     tpq   taq species site    mes x_new #>   <dbl> <dbl> <chr>   <chr> <dbl> <dbl> #> 1    34    43 fox     a      1.22  40.5 #> 2    34    43 fox     a      1.90  37.6 #> 3    87    98 fox     b      2.94  91.8 #> 4    87    98 fox     b      4.38  96.6 #> 5    34    43 hound   a      4.35  41.6 #> 6    34    43 hound   a      2.91  37.7 #> 7    87    98 hound   b      1.58  87.8 #> 8    87    98 hound   b      1.45  97.5 df_u_site %>% shake_uniform_within(tpq, taq, within=site) # equal x_new within site #> # A tibble: 8 × 6 #>     tpq   taq species site    mes x_new #>   <dbl> <dbl> <chr>   <chr> <dbl> <dbl> #> 1    34    43 fox     a      1.22  35.8 #> 2    34    43 fox     a      1.90  35.8 #> 3    87    98 fox     b      2.94  87.5 #> 4    87    98 fox     b      4.38  87.5 #> 5    34    43 hound   a      4.35  35.8 #> 6    34    43 hound   a      2.91  35.8 #> 7    87    98 hound   b      1.58  87.5 #> 8    87    98 hound   b      1.45  87.5  # gaussian shaking now df_g # unshaken data #> # A tibble: 8 × 5 #>     c14   sd1 species site    mes #>   <dbl> <dbl> <chr>   <chr> <dbl> #> 1    34     6 fox     a      1.22 #> 2   -90    18 fox     a      1.90 #> 3    87     7 fox     b      2.94 #> 4     5    12 fox     b      4.38 #> 5   -95     7 hound   a      4.35 #> 6    42    12 hound   a      2.91 #> 7    10    17 hound   b      1.58 #> 8    27    10 hound   b      1.45 df_g %>% shake_gaussian(c14, sd1) # x_new is centered on c14 with gaussian noise (sd=sd1) #> # A tibble: 8 × 6 #>     c14   sd1 species site    mes  x_new #>   <dbl> <dbl> <chr>   <chr> <dbl>  <dbl> #> 1    34     6 fox     a      1.22  24.1  #> 2   -90    18 fox     a      1.90 -69.1  #> 3    87     7 fox     b      2.94  77.1  #> 4     5    12 fox     b      4.38  20.5  #> 5   -95     7 hound   a      4.35 -94.4  #> 6    42    12 hound   a      2.91  58.2  #> 7    10    17 hound   b      1.58  -6.83 #> 8    27    10 hound   b      1.45  30.6  df_g %>% shake_gaussian(c14, sd1) # same idea, different values #> # A tibble: 8 × 6 #>     c14   sd1 species site    mes  x_new #>   <dbl> <dbl> <chr>   <chr> <dbl>  <dbl> #> 1    34     6 fox     a      1.22  31.9  #> 2   -90    18 fox     a      1.90 -86.5  #> 3    87     7 fox     b      2.94  92.4  #> 4     5    12 fox     b      4.38   2.09 #> 5   -95     7 hound   a      4.35 -95.5  #> 6    42    12 hound   a      2.91  40.3  #> 7    10    17 hound   b      1.58  29.5  #> 8    27    10 hound   b      1.45  39.9   # stratified version # same approach as above, inherit from 1st value, # to make a tibble that makes sense for *_within variant df_g %>%   dplyr::group_by(site) %>%   dplyr::mutate(c14=c14[1], sd1=sd1[1]) %>%   dplyr::ungroup() -> df_g_site  df_g_site %>% shake_gaussian_within(c14, sd1, site) #> # A tibble: 8 × 6 #>     c14   sd1 species site    mes x_new #>   <dbl> <dbl> <chr>   <chr> <dbl> <dbl> #> 1    34     6 fox     a      1.22  35.8 #> 2    34     6 fox     a      1.90  35.8 #> 3    87     7 fox     b      2.94  82.3 #> 4    87     7 fox     b      4.38  82.3 #> 5    34     6 hound   a      4.35  35.8 #> 6    34     6 hound   a      2.91  35.8 #> 7    87     7 hound   b      1.58  82.3 #> 8    87     7 hound   b      1.45  82.3"},{"path":"https://vbonhomme.github.io/pataqu/reference/spaghetti.html","id":null,"dir":"Reference","previous_headings":"","what":"Spaghetti plot after permutations — spaghetti","title":"Spaghetti plot after permutations — spaghetti","text":"Display result permutations","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/spaghetti.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spaghetti plot after permutations — spaghetti","text":"","code":"spaghetti(df, x = x_pred, y = y_pred, by, size = 0.2, ...)  spaghetti0(   df,   x = x_new,   y = y,   by = NULL,   method = NULL,   formula = NULL,   se = FALSE,   size = 0.2,   ... )"},{"path":"https://vbonhomme.github.io/pataqu/reference/spaghetti.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spaghetti plot after permutations — spaghetti","text":"df tibble() result permutation function x, y colnames x y columns (x_new/y default) colnames grouping column (optional, default NULL) size passed ggplot2::geom_line()/ggplot2::geom_smooth() ... additional parameters ggplot2::geom_line()/ggplot2::geom_smooth() (eg alpha) spaghetti/spaghetti0, respectively method, formula passed ggplot2::geom_smooth(), defaults NULL let ggplot2 pick default method specified se passed ggplot2::geom_smooth(), default FALSE draw lines","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/spaghetti.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spaghetti plot after permutations — spaghetti","text":"ggplot2 primer allows inspecting effect fitting functions (spaghetti) raw data (spaghetti0).","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/spaghetti.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Spaghetti plot after permutations — spaghetti","text":"spaghetti: quake fit spaghetti0: straight quake","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/spaghetti.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spaghetti plot after permutations — spaghetti","text":"","code":"## spaghetti0 it the plotting function to use right after quake:  # general trend over permutations spaghetti0(animals_q, x=x_new, y=value, col=\"gold\") #> `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'   # per taxa now spaghetti0(animals_q, x=x_new, y=value, by=taxa) #> `geom_smooth()` using method = 'loess' and formula 'y ~ x'   # you can choose other parameters for geom_smooth (if that makes sense) # for instance, here lm with no intercept spaghetti0(animals_q, x=x_new, y=value, by=taxa, method=\"lm\", formula=y~x-1)   # you can also customise this using some ggplot2 spice # note that if you library(ggplot2) you won't need all these ggplot2:: #' # color palette from https://www.colourlovers.com/palette/1473/Ocean_Five colors <- c(\"bird\"=\"#00A0B0\",\"cat\"=\"#CC333F\", \"frog\"=\"#CBE86B\", \"mouse\"=\"#EDC951\") spaghetti0(animals_q, x=x_new, y=value, by=taxa) +   ggplot2::scale_color_manual(values=colors) +   ggplot2::labs(title=\"al dente\", x=\"year\", y=\"value of interest\") #> `geom_smooth()` using method = 'loess' and formula 'y ~ x'     ## spaghetti is intended for use _after_ fitting function  ## it does not call geom_smooth but geom_line directly   animals_f <- fit_gam(animals_q, y=value, by=taxa, x_pred=seq(-100, 100, 10)) #>  * fitting with gam(value ~ s(x_new, bs = \"cs\"))   # and the general behaviour is the same as fo spaghetti0 eg:   spaghetti(animals_f, by=taxa, alpha=0.5) +   ggplot2::scale_color_manual(values=colors) +   ggplot2::labs(title=\"on the full range\", x=\"year\", y=\"value of interest\") +   ggplot2::guides(colour=ggplot2::guide_legend(override.aes=list(size=3, alpha=1)))"},{"path":"https://vbonhomme.github.io/pataqu/reference/test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test differences within temporal slices — test","title":"Test differences within temporal slices — test","text":"Useful fitting test \"synchronic\" differences groups. Within temporal unit :","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test differences within temporal slices — test","text":"","code":"test_globally(df, x = x_pred, y = y_pred, by = group, test_fun = kruskal_p)  test_pairwise(df, x = x_pred, y = y_pred, by = group, test_fun = wilcox_p)"},{"path":"https://vbonhomme.github.io/pataqu/reference/test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test differences within temporal slices — test","text":"df tibble() typically result quake() x, y, group colnames use. Default x_pred/y_pred colname group use. Default group test_fun function pick among comparison_testers(comparison testers). default kruskal_p/wilcox_p synchrony/synchrony_pw, respectively.","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test differences within temporal slices — test","text":"test_globally test least one group differs others test_pairwise test pairwise differences groups present time.","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/test.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Test differences within temporal slices — test","text":"test_globally: test global differences test_pairwise: test pairwise differences","code":""},{"path":"https://vbonhomme.github.io/pataqu/reference/test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test differences within temporal slices — test","text":"","code":"# for the sake of speed x <- animals %>%   quake(5, min=tpq, max=taq) %>%   fit_gam(y=value, by=taxa, x_pred=seq(-100, 100, 50)) #>  * fitting with gam(value ~ s(x_new, bs = \"cs\")) #>  * quake . using shake_uniform #>  * launching 5 permutations  x %>% spaghetti(by=taxa)   # global testing x %>% test_globally(by=taxa) #>  * testing global differences within taxa along 5 slices using kruskal_p #> # A tibble: 5 × 2 #>   x_pred        p #>    <dbl>    <dbl> #> 1   -100 0.000471 #> 2    -50 0.000471 #> 3      0 0.00196  #> 4     50 0.000471 #> 5    100 0.000536  # pairwise testing x %>% test_pairwise(by=taxa) #>  * testing differences between pairs of taxa along 5 slices using wilcox_p #> # A tibble: 30 × 3 #>    x_pred pw                 p #>     <dbl> <chr>          <dbl> #>  1   -100 cat ~ bird   0.00794 #>  2   -100 cat ~ mouse  0.00794 #>  3   -100 cat ~ frog   0.00794 #>  4   -100 bird ~ mouse 0.00794 #>  5   -100 bird ~ frog  0.00794 #>  6   -100 mouse ~ frog 0.00794 #>  7    -50 cat ~ bird   0.00794 #>  8    -50 cat ~ mouse  0.00794 #>  9    -50 cat ~ frog   0.00794 #> 10    -50 bird ~ mouse 0.00794 #> # … with 20 more rows  # bonferroni todo"},{"path":"https://vbonhomme.github.io/pataqu/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way. enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions). simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[. Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround. Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually : Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"}]
