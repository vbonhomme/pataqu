% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/test.R
\name{test}
\alias{test}
\alias{test_globally}
\alias{test_pairwise}
\title{Test differences within temporal slices}
\usage{
test_globally(df, x = x_pred, y = y_pred, by = group, test_fun = kruskal_p)

test_pairwise(df, x = x_pred, y = y_pred, by = group, test_fun = wilcox_p)
}
\arguments{
\item{df}{\code{\link[=tibble]{tibble()}} typically the result of \code{\link[=quake]{quake()}}}

\item{x, y, group}{colnames to use. Default to \code{x_pred}/\code{y_pred}}

\item{by}{colname for the group to use. Default to \code{group}}

\item{test_fun}{function to pick among \link{comparison_testers}(comparison testers).
By default \code{kruskal_p}/\code{wilcox_p} for \code{synchrony}/\code{synchrony_pw}, respectively.}
}
\description{
Useful after \link{fitting} to test "synchronic" differences between groups.
Within a temporal unit :
}
\details{
\itemize{
\item \code{test_globally} will test if at least one group differs from the others
\item \code{test_pairwise} will test all pairwise differences between
groups present at that time.
}
}
\section{Functions}{
\itemize{
\item \code{test_globally}: test for global differences

\item \code{test_pairwise}: test for pairwise differences
}}

\examples{

# for the sake of speed
x <- animals \%>\%
  quake(5, min=tpq, max=taq) \%>\%
  fit_gam(y=value, by=taxa, x_pred=seq(-100, 100, 50))

x \%>\% spaghetti(by=taxa)

# global testing
x \%>\% test_globally(by=taxa)

# pairwise testing
x \%>\% test_pairwise(by=taxa)

# you can filter "significant" ones
alpha=0.01
x \%>\%
  test_pairwise(by=taxa) \%>\%
  dplyr::mutate(signif=p<alpha)
  # you can continue the pipe with
  # dplyr::filter(!signif) to only get not different
  # or
  # dplyr::filter(signif) to only the different ones

# yet before, you probably need to adjust your alpha
# by the number of tests, ie do some Bonferroni correction
# the number of tests is simply dplyr::n()

x \%>\%
  test_pairwise(by=taxa) \%>\%
  dplyr::mutate(alpha_adj=alpha/n(),
                signif=p<alpha_adj)

}
